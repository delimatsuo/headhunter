rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isOrgMember(orgId) {
      return isAuthenticated() && 
             getUserData().data.organization_id == orgId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             getUserData().data.role in ['admin', 'super_admin'];
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             getUserData().data.role == 'super_admin';
    }
    
    // Organizations - read by members, write by admins only
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow write: if isAdmin() && isOrgMember(orgId);
    }
    
    // Users - read own profile and org members, write own profile only
    match /users/{userId} {
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && isOrgMember(resource.data.organization_id));
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || 
                       (isAdmin() && isOrgMember(resource.data.organization_id));
      allow delete: if isSuperAdmin();
    }
    
    // Candidates - organization-scoped access
    match /candidates/{candidateId} {
      allow read: if isAuthenticated() && 
                     isOrgMember(resource.data.organization_id);
      allow write: if false; // Only Cloud Functions can write
    }

    // Enriched profiles - organization-scoped access
    match /enriched_profiles/{profileId} {
      allow read: if isAuthenticated() &&
                     isOrgMember(resource.data.organization_id);
      allow write: if false; // Only Cloud Functions/processors write
    }
    
    // Jobs - organization-scoped access
    match /jobs/{jobId} {
      allow read: if isAuthenticated() && 
                     isOrgMember(resource.data.organization_id);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Candidate embeddings - admin-only read, no direct writes
    match /candidate_embeddings/{embeddingId} {
      allow read: if isAdmin();
      allow write: if false; // Only backend pipelines write
    }
    
    // Processing queue - organization-scoped access
    match /processing_queue/{queueId} {
      allow read: if isAuthenticated() && 
                     isOrgMember(resource.data.organization_id);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Search cache - organization-scoped access  
    match /search_cache/{cacheId} {
      allow read: if isAuthenticated() && 
                     isOrgMember(resource.data.organization_id);
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Activity logs - organization-scoped access
    match /activity_logs/{logId} {
      allow read: if isAuthenticated() && 
                     isOrgMember(resource.data.organization_id);
      allow write: if false; // Only Cloud Functions can write
    }

    // Audit logs (sensitive) - admin read only, no direct writes
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only Cloud Functions write
    }

    // Allowed users (admin allowlist management)
    match /allowed_users/{userKey} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin() || isAdmin();
    }
    
    // User subcollections - private access only
    match /users/{userId}/search_history/{searchId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false; // Immutable once created
      allow delete: if isOwner(userId);
    }
    
    match /users/{userId}/preferences/{preferenceId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    match /users/{userId}/saved_jobs/{jobId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
