# Task ID: 35
# Title: Develop React Search UI with Authentication
# Status: pending
# Dependencies: 32, 34
# Priority: medium
# Description: Build secure React web application with Firebase Authentication, JD search interface, ranked results display, and candidate detail views
# Details:
1. Set up React app with TypeScript and Material-UI
2. Implement Firebase Auth with Google Sign-In (Ella domain restriction)
3. Create JD input component with textarea and submit
4. Build results list with minimal row display (name, role, company, score)
5. Implement candidate detail page with full skill map
6. Add 'Why they match' rationale display
7. Include freshness badges and LinkedIn links
8. Add loading states and error handling
9. Implement responsive design for mobile

# Test Strategy:
Test auth flow with valid/invalid domains, test search submission and result rendering, verify responsive layout on multiple devices, test error states, validate accessibility standards

# Subtasks:
## 1. Initialize React App with TypeScript and Material-UI [pending]
### Dependencies: None
### Description: Set up new React application with TypeScript configuration, Material-UI theming, and project structure
### Details:
Create React app using Create React App with TypeScript template, install Material-UI dependencies (@mui/material, @mui/icons-material, @emotion/react, @emotion/styled), configure MUI theme provider with Ella brand colors, set up folder structure (components, pages, services, utils, types), configure absolute imports in tsconfig.json, add ESLint and Prettier configurations

## 2. Implement Firebase Authentication with Domain Restrictions [pending]
### Dependencies: 35.1
### Description: Set up Firebase Auth with Google Sign-In and enforce Ella domain email restrictions
### Details:
Install Firebase SDK and configure Firebase project settings, implement AuthContext with useAuth hook for state management, create Google Sign-In provider with domain restriction logic (ella.com emails only), build login page with Google Sign-In button and error messaging, implement protected route wrapper component, add logout functionality in app header, handle auth persistence and session management

## 3. Create Job Description Input Component [pending]
### Dependencies: 35.1
### Description: Build JD input interface with textarea, validation, and submit functionality
### Details:
Design JDInput component with Material-UI TextField (multiline), implement character count and minimum/maximum length validation, add placeholder text with example job description format, create submit button with loading state handling, implement form validation with error messages, add clear/reset functionality, store JD in component state with debouncing

## 4. Build Search Results List Component [pending]
### Dependencies: 35.1, 35.3
### Description: Implement candidate results display with minimal row format and pagination
### Details:
Create CandidateList component with Material-UI List/ListItem, display minimal info per row (name, current role, company, match score), implement match score visual indicator (progress bar or badge), add pagination with Material-UI Pagination component, implement sorting options (score, freshness, name), create empty state and no results messaging, add click handler to navigate to detail view

## 5. Implement Candidate Detail View Component [pending]
### Dependencies: 35.1, 35.4
### Description: Build comprehensive candidate profile page with full skill mapping and experience details
### Details:
Create CandidateDetail component with Material-UI Card layouts, display full profile information (experience, education, skills), implement skill map visualization using chips or radar chart, show career trajectory and progression timeline, display company pedigree and role history, add back navigation to results list, implement data loading from Firestore by candidate ID

## 6. Add Match Rationale Display System [pending]
### Dependencies: 35.5
### Description: Implement 'Why they match' explanation cards with key matching factors
### Details:
Create MatchRationale component with Material-UI Cards, display top 3-5 matching factors with explanations, implement skill match percentage visualization, show experience alignment highlights, add keyword matches from JD to profile, use color coding for match strength indicators, integrate rationale data from search API response

## 7. Integrate Freshness Badges and LinkedIn Links [pending]
### Dependencies: 35.4, 35.5
### Description: Add profile freshness indicators and external LinkedIn profile links
### Details:
Create FreshnessBadge component with date calculations, implement color-coded badges (green: <30 days, yellow: 30-90 days, red: >90 days), add LinkedIn icon button with external link handling, implement URL validation for LinkedIn profiles, add tooltip explanations for freshness indicators, handle missing LinkedIn URLs gracefully, ensure links open in new tabs with security attributes

## 8. Implement Loading States and Error Handling [pending]
### Dependencies: 35.2, 35.3, 35.4, 35.5
### Description: Add comprehensive loading indicators and error boundary components
### Details:
Create reusable Loading component with Material-UI Skeleton, implement error boundary for React error catching, add try-catch blocks for API calls with user-friendly messages, create toast notifications for success/error states, implement retry logic for failed API requests, add loading states for search, pagination, and detail views, handle network timeout scenarios

## 9. Develop Responsive Design Implementation [pending]
### Dependencies: 35.3, 35.4, 35.5, 35.6
### Description: Ensure all components work seamlessly across mobile, tablet, and desktop viewports
### Details:
Implement Material-UI responsive breakpoints (xs, sm, md, lg, xl), create mobile-first CSS with media queries, adjust component layouts for different screen sizes, implement collapsible navigation for mobile, ensure touch-friendly button sizes (minimum 44px), test on various devices using Chrome DevTools, optimize font sizes and spacing for readability

## 10. Ensure Accessibility Compliance [pending]
### Dependencies: 35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9
### Description: Implement WCAG 2.1 AA accessibility standards across all components
### Details:
Add proper ARIA labels and roles to all components, ensure keyboard navigation support throughout app, implement focus management and tab order, add screen reader announcements for dynamic content, ensure color contrast ratios meet WCAG standards, add alt text for all images and icons, test with accessibility tools (axe DevTools, WAVE), implement skip navigation links

