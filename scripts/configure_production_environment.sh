#!/usr/bin/env bash
set -euo pipefail


SCRIPT_DIR=${SCRIPT_DIR:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}
# Guard against running from deprecated repository clones.
REPO_ROOT=${REPO_ROOT:-$(cd "${SCRIPT_DIR}/.." && pwd)}
# shellcheck source=./utils/repo_guard.sh
source "${SCRIPT_DIR}/utils/repo_guard.sh"

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
ROOT_DIR=$(cd "${SCRIPT_DIR}/.." && pwd)
DEFAULT_CONFIG="${ROOT_DIR}/config/infrastructure/headhunter-ai-0088-production.env"
CONFIG_FILE="${DEFAULT_CONFIG}"
CLI_PROJECT_ID=""
CLI_REGION=""
ENVIRONMENT=production
DRY_RUN=false
OUTPUT_DIR="${ROOT_DIR}/config/environment"

usage() {
  cat <<USAGE
Usage: $(basename "$0") [OPTIONS]

Configure production environment variables, secret references, and service URLs.

Options:
  --project-id ID          Override project id from config
  --region REGION          Override region from config
  --config PATH            Infrastructure config path (default: ${DEFAULT_CONFIG})
  --environment ENV        Environment suffix (default: production)
  --output-dir DIR         Directory to write rendered environment files
  --dry-run                Print actions without executing
  -h, --help               Show this message and exit
USAGE
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --project-id)
      CLI_PROJECT_ID="$2"
      shift 2
      ;;
    --region)
      CLI_REGION="$2"
      shift 2
      ;;
    --config)
      CONFIG_FILE="$2"
      shift 2
      ;;
    --environment)
      ENVIRONMENT="$2"
      shift 2
      ;;
    --output-dir)
      OUTPUT_DIR="$2"
      shift 2
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      exit 1
      ;;
  esac
done

if [[ ! -f "${CONFIG_FILE}" ]]; then
  echo "Config file ${CONFIG_FILE} not found" >&2
  exit 1
fi

# shellcheck disable=SC1090
source "${CONFIG_FILE}"
CONFIG_PROJECT_ID="${PROJECT_ID:-}"
CONFIG_REGION="${REGION:-}"
PROJECT_ID="${CLI_PROJECT_ID:-${CONFIG_PROJECT_ID}}"
REGION="${CLI_REGION:-${CONFIG_REGION}}"
if [[ -z "${PROJECT_ID}" || -z "${REGION}" ]]; then
  echo "Project id and region must be provided" >&2
  exit 1
fi

require_command() {
  command -v "$1" >/dev/null 2>&1 || {
    echo "$1 CLI is required" >&2
    exit 1
  }
}

require_command gcloud
require_command jq

log() {
  printf '[configure-env][%s] %s\n' "${ENVIRONMENT}" "$*" >&2
}

REPORT="Environment configuration summary\nProject: ${PROJECT_ID}\nRegion: ${REGION}\nEnvironment: ${ENVIRONMENT}\nGenerated: $(date -Is)\n\n"
append_report() {
  REPORT+="$1\n"
}

validate_secret() {
  local secret=$1
  if gcloud secrets describe "${secret}" --project="${PROJECT_ID}" >/dev/null 2>&1; then
    append_report "[PASS] Secret ${secret} present"
  else
    append_report "[FAIL] Secret ${secret} missing"
    return 1
  fi
}

SECRETS_TO_VALIDATE=(
  "${SECRET_DB_PRIMARY}"
  "${SECRET_DB_REPLICA}"
  "${SECRET_DB_ANALYTICS}"
  "${SECRET_DB_OPERATIONS}"
  "${SECRET_REDIS_ENDPOINT}"
  "${SECRET_TOGETHER_AI}"
  "${SECRET_GEMINI_AI}"
  "${SECRET_ADMIN_JWT}"
  "${SECRET_WEBHOOK}"
  "${SECRET_OAUTH_CLIENT}"
  "${SECRET_EDGE_CACHE}"
)

append_report "--- Secret validation ---"
SECRET_ERRORS=0
for secret in "${SECRETS_TO_VALIDATE[@]}"; do
  [[ -z "${secret}" ]] && continue
  if ! validate_secret "${secret}"; then
    SECRET_ERRORS=$((SECRET_ERRORS + 1))
  fi
done

if [[ ${SECRET_ERRORS} -gt 0 ]]; then
  append_report "[WARN] ${SECRET_ERRORS} secrets missing"
fi

append_report "\n--- Service URLs ---"
fetch_service_url() {
  local base=$1
  gcloud run services describe "${base}-${ENVIRONMENT}" \
    --project="${PROJECT_ID}" --region="${REGION}" --platform=managed \
    --format='value(status.url)' 2>/dev/null || true
}

declare -A SERVICE_URLS
for service in hh-embed-svc hh-search-svc hh-rerank-svc hh-evidence-svc hh-eco-svc hh-enrich-svc hh-admin-svc hh-msgs-svc; do
  url=$(fetch_service_url "${service}")
  if [[ -n "${url}" ]]; then
    append_report "[INFO] ${service}-${ENVIRONMENT} -> ${url}"
    SERVICE_URLS["${service}"]="${url}"
  else
    append_report "[WARN] ${service}-${ENVIRONMENT} not yet deployed"
  fi
done

OUTPUT_FILE="${OUTPUT_DIR}/${ENVIRONMENT}.env"
log "Rendering environment file ${OUTPUT_FILE}"

mkdir -p "${OUTPUT_DIR}"

render_env_file() {
  cat <<ENV
# Auto-generated by configure_production_environment.sh on $(date -Is)
PROJECT_ID=${PROJECT_ID}
REGION=${REGION}
ENVIRONMENT=${ENVIRONMENT}
DEFAULT_TENANT=${DEFAULT_TENANT}
ARTIFACT_REGISTRY=${ARTIFACT_REGISTRY}
SQL_INSTANCE=${SQL_INSTANCE}
SQL_INSTANCE_MSGS=${SQL_INSTANCE_MSGS}
SQL_DATABASE=${SQL_DATABASE}
SQL_USER_APP=${SQL_USER_APP}
SQL_USER_ADMIN=${SQL_USER_ADMIN}
SQL_USER_ANALYTICS=${SQL_USER_ANALYTICS}
SQL_USER_OPERATIONS=${SQL_USER_OPERATIONS}
REDIS_INSTANCE=${REDIS_INSTANCE}
REDIS_HOST=${REDIS_HOST}
REDIS_PORT=${REDIS_PORT}
SECRET_DB_PRIMARY=${SECRET_DB_PRIMARY}
SECRET_DB_REPLICA=${SECRET_DB_REPLICA}
SECRET_DB_ANALYTICS=${SECRET_DB_ANALYTICS}
SECRET_DB_OPERATIONS=${SECRET_DB_OPERATIONS}
SECRET_REDIS_ENDPOINT=${SECRET_REDIS_ENDPOINT}
SECRET_TOGETHER_AI=${SECRET_TOGETHER_AI}
SECRET_GEMINI_AI=${SECRET_GEMINI_AI}
SECRET_ADMIN_JWT=${SECRET_ADMIN_JWT}
SECRET_WEBHOOK=${SECRET_WEBHOOK}
SECRET_OAUTH_CLIENT=${SECRET_OAUTH_CLIENT}
SECRET_EDGE_CACHE=${SECRET_EDGE_CACHE}
EMBED_SERVICE_URL=${SERVICE_URLS["hh-embed-svc"]:-}
SEARCH_SERVICE_URL=${SERVICE_URLS["hh-search-svc"]:-}
RERANK_SERVICE_URL=${SERVICE_URLS["hh-rerank-svc"]:-}
EVIDENCE_SERVICE_URL=${SERVICE_URLS["hh-evidence-svc"]:-}
ECO_SERVICE_URL=${SERVICE_URLS["hh-eco-svc"]:-}
ENRICH_SERVICE_URL=${SERVICE_URLS["hh-enrich-svc"]:-}
ADMIN_SERVICE_URL=${SERVICE_URLS["hh-admin-svc"]:-}
MSGS_SERVICE_URL=${SERVICE_URLS["hh-msgs-svc"]:-}
TOGETHER_MODEL=${TOGETHER_AI_MODEL}
TOGETHER_EMBED_MODEL=${TOGETHER_EMBED_MODEL}
TOGETHER_P95_TARGET_MS=${TOGETHER_AI_P95_TARGET_MS}
GEMINI_MODEL=${GEMINI_MODEL}
ENRICH_TIMEOUT_SECONDS=${ENRICH_PIPELINE_TIMEOUT_SECONDS}
MONITORING_WORKSPACE=${MONITORING_WORKSPACE}
ALERTING_CHANNEL=${ALERTING_CHANNEL}
ENV
}

if [[ "${DRY_RUN}" == true ]]; then
  append_report "Dry-run: environment file preview"
  render_env_file
else
  render_env_file >"${OUTPUT_FILE}"
  append_report "Environment file written to ${OUTPUT_FILE}"
fi

append_report "\n--- Validation ---"
if [[ ${SECRET_ERRORS} -gt 0 ]]; then
  append_report "Status: WARN (missing secrets)"
else
  append_report "Status: OK"
fi

printf '%s\n' "${REPORT}"
